{"identifier":{"url":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"GUUnitsGeneratorConversions"}],"role":"article","title":"Getting Started","roleHeading":"Article"},"abstract":[{"type":"codeVoice","code":"GUUnitsGeneratorConversions"},{"text":" is the main target of ","type":"text"},{"type":"codeVoice","code":"guunits_generator"},{"text":". This target provides the unit and category","type":"text"},{"text":" ","type":"text"},{"text":"definitions for all the code generated in ","type":"text"},{"type":"codeVoice","code":"GUUnits"},{"text":".","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The target is broken up into 3 key subdirectories:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"units"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"source_generation","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"test_generation"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"We will examine each of these subdirectories in the following sections. For a quick guide explaining how to create a new unit,"},{"type":"text","text":" "},{"type":"text","text":"see the "},{"type":"reference","identifier":"creatingnewunits","isActive":true},{"type":"text","text":" document."}],"type":"paragraph"},{"text":"Units","anchor":"Units","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"code":"units","type":"codeVoice"},{"text":" subdirectory is the simplist of all the other subdirectories. This folder contains the category definitions for each","type":"text"},{"text":" ","type":"text"},{"text":"unit type. A category is simply a group of units that describe\/measure the same phenomenon. For example, consider the ","type":"text"},{"code":"Distance","type":"codeVoice"},{"text":" ","type":"text"},{"text":"category which contains the units ","type":"text"},{"code":"metres","type":"codeVoice"},{"text":", ","type":"text"},{"code":"centimetres","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"millimetres","type":"codeVoice"},{"text":". This category is defined in ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","type":"reference","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"All categories must conform to the ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol","type":"reference","isActive":true},{"text":" protocol to allow source and test generation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In addition to the units definitions, this subdirectory also contains the "},{"code":"C","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" primitive types that are supported"},{"type":"text","text":" "},{"type":"text","text":"by "},{"code":"GUUnits","type":"codeVoice"},{"type":"text","text":". You may view the supported C types in "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/NumericTypes","isActive":true},{"type":"text","text":", and the supported "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" types in "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftNumericTypes","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"All units can be converted to\/from these supported primitive types."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Lastly, it is worth mentioning that each unit type (e.g. "},{"code":"metres","type":"codeVoice"},{"type":"text","text":" in the "},{"code":"Distance","type":"codeVoice"},{"type":"text","text":" category) has 4 different underlying types that support"},{"type":"text","text":" "},{"type":"text","text":"varying levels of precision. These types are the "},{"code":"C","type":"codeVoice"},{"type":"text","text":" primitive types "},{"code":"double","type":"codeVoice"},{"type":"text","text":", "},{"code":"float","type":"codeVoice"},{"type":"text","text":", "},{"code":"uint64_t","type":"codeVoice"},{"type":"text","text":", and "},{"code":"int64_t","type":"codeVoice"},{"type":"text","text":". Each unit is therefore"},{"type":"text","text":" "},{"type":"text","text":"represented as a new type depending on itâ€™s precision and is suffixed with "},{"code":"_d","type":"codeVoice"},{"type":"text","text":", "},{"code":"_f","type":"codeVoice"},{"type":"text","text":", "},{"code":"_u","type":"codeVoice"},{"type":"text","text":", or "},{"code":"_t","type":"codeVoice"},{"type":"text","text":" for "},{"code":"double","type":"codeVoice"},{"type":"text","text":", "},{"code":"float","type":"codeVoice"},{"type":"text","text":", "},{"code":"unit64_t","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"int64_t","type":"codeVoice"},{"type":"text","text":" respectively in the source code. For example, consider the "},{"code":"metres","type":"codeVoice"},{"type":"text","text":" unit; in the generated "},{"code":"C","type":"codeVoice"},{"type":"text","text":" source code, the "},{"code":"metres","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"unit is represented as 4 "},{"code":"C","type":"codeVoice"},{"type":"text","text":" types: "},{"code":"metres_d","type":"codeVoice"},{"type":"text","text":", "},{"code":"metres_f","type":"codeVoice"},{"type":"text","text":", "},{"code":"metres_u","type":"codeVoice"},{"type":"text","text":", and "},{"code":"metres_t","type":"codeVoice"},{"type":"text","text":". The different versions of the unit type is referred"},{"type":"text","text":" "},{"type":"text","text":"to in this documentation as a units "},{"code":"Sign","type":"codeVoice"},{"type":"text","text":", and is defined in the enum "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Signs","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Source Generation","anchor":"Source-Generation","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This subdirectory contains the code required to generate the "},{"type":"codeVoice","code":"C"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" sources for all of the units and their conversions."},{"type":"text","text":" "},{"type":"text","text":"In order to generate the correct sources for each unit, an equivalent "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator"},{"type":"text","text":" must be used for that unit type."},{"type":"text","text":" "},{"type":"text","text":"Simple types using "},{"type":"codeVoice","code":"SI"},{"type":"text","text":" prefixes can utilise the existing "},{"type":"codeVoice","code":"GradualFunctionCreator"},{"type":"text","text":" which performs simple multiplication or"},{"type":"text","text":" "},{"type":"text","text":"division with a pre-defined scale factor (see "},{"type":"reference","overridingTitle":"Creating New Units","overridingTitleInlineContent":[{"text":"Creating New Units","type":"text"}],"isActive":true,"identifier":"creatingnewunits"},{"type":"text","text":"). If any unit performs conversions that"},{"type":"text","text":" "},{"type":"text","text":"cannot be defined as a simple multiplication or divide, then a custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator"},{"type":"text","text":" must be defined that implements"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"C"},{"type":"text","text":" code to perform the conversion."}],"type":"paragraph"},{"inlineContent":[{"text":"To keep consistency between all unit categories, the definitions of the functions in ","type":"text"},{"code":"C","type":"codeVoice"},{"text":" will follow a naming convention that","type":"text"},{"text":" ","type":"text"},{"text":"is enforced by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CFunctionDefinitionCreator","type":"reference"},{"text":". When used in tandem with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeFunctionCreator","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/NumericTypeConverter","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"C","type":"codeVoice"},{"text":" implementation is automatically created using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","type":"reference"},{"text":" of that unit. This process is completely","type":"text"},{"text":" ","type":"text"},{"text":"automated and is not usually altered when adding new units. For convenience, all source generation is performed through","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"reference"},{"text":" that combines these types. For brevity, a new unit typically creates an extension on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"reference"},{"text":" ","type":"text"},{"text":"and a ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" to allow easy initialisation (see ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"text":"Creating New Units","type":"text"}],"identifier":"creatingnewunits","overridingTitle":"Creating New Units","type":"reference"},{"text":"). This process is demonstrated","type":"text"},{"text":" ","type":"text"},{"text":"for the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TemperatureUnits","type":"reference"},{"text":" category below.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ TemperatureUnits initialiser for C conversions.","extension UnitsGenerator where","    Creator == CompositeFunctionCreator<","        TemperatureFunctionCreator,","        CFunctionDefinitionCreator<TemperatureUnits>,","        NumericTypeConverter","    > {","","    \/\/\/ Initialise using TemperatureUnits and C conversions.","    \/\/\/ - Parameters:","    \/\/\/   - bodyCreator: The creator which generates function bodies.","    \/\/\/   - definitionCreator: The definitionCreate which generates function definitions.","    \/\/\/   - numericConverter: The numericConverter which generates numeric type conversions.","    \/\/\/   - helpers: The helpers which generate function names and some definitions.","    public init(","        bodyCreator: TemperatureFunctionCreator = TemperatureFunctionCreator(),","        definitionCreator: CFunctionDefinitionCreator<TemperatureUnits> = CFunctionDefinitionCreator(),","        numericConverter: NumericTypeConverter = NumericTypeConverter(),","        helpers: FunctionHelpers<Creator.Unit> = FunctionHelpers<Creator.Unit>()","    ) {","        self.init(creator: CompositeFunctionCreator(","            bodyCreator: bodyCreator,","            definitionCreator: definitionCreator,","            numericConverter: numericConverter","        ))","    }","","}","","\/\/\/ Temperature Units Generator","public typealias TemperatureUnitsGenerator = UnitsGenerator<","    CompositeFunctionCreator<","        TemperatureFunctionCreator,","        CFunctionDefinitionCreator<TemperatureUnits>,","        NumericTypeConverter","    >",">"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The top level code may then create a source generator for "},{"type":"codeVoice","code":"Temperature"},{"type":"text","text":" by invoking:"}],"type":"paragraph"},{"syntax":"swift","code":["let generator = TemperatureUnitsGenerator()"],"type":"codeListing"},{"text":"Test Generation","anchor":"Test-Generation","type":"heading","level":2},{"inlineContent":[{"text":"This package also generates tests for the ","type":"text"},{"code":"C","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" sources. All of the code that handles the test generation","type":"text"},{"text":" ","type":"text"},{"text":"is contained within the ","type":"text"},{"code":"test_generation","type":"codeVoice"},{"text":" folder. A test in this package is represented as an input to output relationship.","type":"text"},{"text":" ","type":"text"},{"text":"Given some input, the test will perform a function with that input and assert that the output from the function matches the","type":"text"},{"text":" ","type":"text"},{"text":"expected output. This relationship is defined inside a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","type":"reference"},{"text":" that creates arrays of input to output relationships","type":"text"},{"text":" ","type":"text"},{"text":"(using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","type":"reference"},{"text":") for a given conversion function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Simple types using ","type":"text"},{"type":"codeVoice","code":"SI"},{"text":" prefixes may use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GradualTestGenerator"},{"text":" to generate the tests for them. Custom unit types or","type":"text"},{"text":" ","type":"text"},{"text":"those that cannot use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GradualFunctionCreator"},{"text":" to implement their conversion function must create a custom type","type":"text"},{"text":" ","type":"text"},{"text":"that conforms to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator"},{"text":". The default implementation of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator"},{"text":" will provide the test cases","type":"text"},{"text":" ","type":"text"},{"text":"for the numeric conversions, i.e conversions containing the types defined in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/NumericTypes"},{"text":". The custom","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator"},{"text":" will only need to provide the tests for a unit to unit conversion.","type":"text"}],"type":"paragraph"},{"text":"Public Interface","anchor":"Public-Interface","type":"heading","level":2},{"inlineContent":[{"text":"The entire public interface to this target is encapsulated within ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator","type":"reference"},{"text":". This struct provides methods","type":"text"},{"text":" ","type":"text"},{"text":"for generating sources and tests for the ","type":"text"},{"code":"C","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" targets of the ","type":"text"},{"code":"GUUnits","type":"codeVoice"},{"text":" package. The respective methods","type":"text"},{"text":" ","type":"text"},{"text":"in this struct will use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"reference"},{"text":" for souce generation, the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol","type":"reference"},{"text":" for unit definition,","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","type":"reference"},{"text":" for test generation following the procedures outlined above. An example of this entire process","type":"text"},{"text":" ","type":"text"},{"text":"is shown in ","type":"text"},{"overridingTitleInlineContent":[{"text":"Creating New Units","type":"text"}],"isActive":true,"overridingTitle":"Creating New Units","identifier":"creatingnewunits","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories"],"title":"Essentials","generated":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions"]]},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/guunitsgeneratorconversions\/gettingstarted"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GradualFunctionCreator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GradualFunctionCreator","type":"topic","navigatorTitle":[{"text":"GradualFunctionCreator","kind":"identifier"}],"abstract":[{"text":"A function body creator that converts between different units by scaling","type":"text"},{"text":" ","type":"text"},{"text":"the magnitude of one unit by a constant value. Examples of this type of","type":"text"},{"text":" ","type":"text"},{"text":"behaviour is seen in SI units where kilo is 1000 times smaller than the","type":"text"},{"text":" ","type":"text"},{"text":"Mega prefix.","type":"text"}],"role":"symbol","title":"GradualFunctionCreator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GradualFunctionCreator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/gradualfunctioncreator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/ConvertingBetweenCategories":{"type":"topic","role":"article","title":"Coverting Between Categories","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories","url":"\/documentation\/guunitsgeneratorconversions\/convertingbetweencategories","abstract":[{"text":"This guide provides instructions for creating relations between different unit categories. A user may use a relation to convert a unit","type":"text"},{"text":" ","type":"text"},{"text":"into another unit from a different category.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TemperatureUnits":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TemperatureUnits","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TemperatureUnits"}],"abstract":[{"type":"text","text":"Category for temperature units."}],"role":"symbol","title":"TemperatureUnits","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TemperatureUnits"}],"url":"\/documentation\/guunitsgeneratorconversions\/temperatureunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CompositeFunctionCreator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeFunctionCreator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompositeFunctionCreator"}],"abstract":[{"text":"A function creator that delegates all methods to stored body creators, definition creators,","type":"text"},{"text":" ","type":"text"},{"text":"and numeric converters.","type":"text"}],"url":"\/documentation\/guunitsgeneratorconversions\/compositefunctioncreator","role":"symbol","title":"CompositeFunctionCreator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CompositeFunctionCreator"}],"type":"topic"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitsGenerator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"topic","navigatorTitle":[{"text":"UnitsGenerator","kind":"identifier"}],"abstract":[{"text":"Struct that generates the code for all the possible conversion functions.","type":"text"}],"role":"symbol","title":"UnitsGenerator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitsGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/unitsgenerator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/NumericTypes":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/NumericTypes","role":"symbol","abstract":[{"type":"text","text":"The numeric types supported by guunits."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NumericTypes"}],"title":"NumericTypes","navigatorTitle":[{"kind":"identifier","text":"NumericTypes"}],"url":"\/documentation\/guunitsgeneratorconversions\/numerictypes","type":"topic","kind":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GUUnitsGenerator":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GUUnitsGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"GUUnitsGenerator","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator","title":"GUUnitsGenerator","abstract":[{"text":"Create the source files the C and swift targets of guunits.","type":"text"}],"url":"\/documentation\/guunitsgeneratorconversions\/guunitsgenerator"},"creatingnewunits":{"title":"Creating New Units","identifier":"creatingnewunits","titleInlineContent":[{"text":"Creating New Units","type":"text"}],"type":"link","url":"creatingnewunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingCompositeUnits":{"title":"Creating Composite Units","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","abstract":[{"text":"This guide demonstrates the process for creating ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"composite units"}]},{"text":". A composite unit is a unit category","type":"text"},{"text":" ","type":"text"},{"text":"that is created from other units.","type":"text"}],"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/creatingcompositeunits","role":"article","kind":"article"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GradualTestGenerator":{"kind":"symbol","title":"GradualTestGenerator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GradualTestGenerator"}],"navigatorTitle":[{"kind":"identifier","text":"GradualTestGenerator"}],"url":"\/documentation\/guunitsgeneratorconversions\/gradualtestgenerator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GradualTestGenerator","abstract":[{"type":"text","text":"Struct used to generate test parameters for units that are convertable using"},{"type":"text","text":" "},{"type":"text","text":"constant factors. e.g. 10 millimetres in a centimetre."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/SwiftNumericTypes":{"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/swiftnumerictypes","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwiftNumericTypes","kind":"identifier"}],"navigatorTitle":[{"text":"SwiftNumericTypes","kind":"identifier"}],"title":"SwiftNumericTypes","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftNumericTypes","role":"symbol","abstract":[{"text":"A type containing Swift-supported types for guunits.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitProtocol":{"url":"\/documentation\/guunitsgeneratorconversions\/unitprotocol","navigatorTitle":[{"text":"UnitProtocol","kind":"identifier"}],"kind":"symbol","title":"UnitProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitProtocol","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol","abstract":[{"type":"text","text":"A protocol for representing unit types that exist within a unit category."},{"type":"text","text":" "},{"type":"text","text":"A unit category represents a type of data that can be expressed with different"},{"type":"text","text":" "},{"type":"text","text":"units. Examples include Distance, Time, Angles, etc. Conforming types might"},{"type":"text","text":" "},{"text":"contain many units for a category, e.g. Distance can have metres, centimetres,","type":"text"},{"text":" ","type":"text"},{"text":"millimetres, etc.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/NumericTypeConverter":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/NumericTypeConverter","type":"topic","navigatorTitle":[{"text":"NumericTypeConverter","kind":"identifier"}],"abstract":[{"text":"A struct for converting between numeric types and unit types.","type":"text"}],"role":"symbol","title":"NumericTypeConverter","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NumericTypeConverter","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/numerictypeconverter"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CFunctionDefinitionCreator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CFunctionDefinitionCreator","type":"topic","navigatorTitle":[{"text":"CFunctionDefinitionCreator","kind":"identifier"}],"abstract":[{"text":"Function that generates the C function definitions for converting between units and numeric types within","type":"text"},{"text":" ","type":"text"},{"text":"the same unit category.","type":"text"}],"role":"symbol","title":"CFunctionDefinitionCreator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CFunctionDefinitionCreator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/cfunctiondefinitioncreator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions":{"kind":"symbol","title":"GUUnitsGeneratorConversions","type":"topic","url":"\/documentation\/guunitsgeneratorconversions","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions","abstract":[{"type":"text","text":"A target for generating the GUUnits package."}],"role":"collection"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestParameters":{"kind":"symbol","title":"TestParameters","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestParameters","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestParameters"}],"url":"\/documentation\/guunitsgeneratorconversions\/testparameters","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","abstract":[{"text":"Class for storing expected test result from an input.","type":"text"}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/FunctionBodyCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/functionbodycreator","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FunctionBodyCreator","kind":"identifier"}],"kind":"symbol","title":"FunctionBodyCreator","abstract":[{"text":"Protocol that generates the code for the implementation of a conversion function.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","navigatorTitle":[{"text":"FunctionBodyCreator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UsingCustomCodeGeneration":{"type":"topic","role":"article","title":"Using Custom Code Generation","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","url":"\/documentation\/guunitsgeneratorconversions\/usingcustomcodegeneration","abstract":[{"text":"This document provides a guide for creating custom source and test generation for a unit category that requires","type":"text"},{"text":" ","type":"text"},{"text":"custom conversion functions.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/DistanceUnits":{"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/distanceunits","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DistanceUnits","kind":"identifier"}],"navigatorTitle":[{"text":"DistanceUnits","kind":"identifier"}],"title":"DistanceUnits","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","role":"symbol","abstract":[{"text":"A Unit for representing distances.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingNewUnits":{"type":"topic","role":"article","title":"Creating New Units","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","url":"\/documentation\/guunitsgeneratorconversions\/creatingnewunits","abstract":[{"text":"Provides a guide and example for creating new units.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestGenerator":{"kind":"symbol","title":"TestGenerator","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"TestGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/testgenerator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","abstract":[{"type":"text","text":"Conforming types will generate test parameters for a specific unit."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Signs":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Signs","navigatorTitle":[{"kind":"identifier","text":"Signs"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Signs"}],"title":"Signs","abstract":[{"text":"Enum containing the standard guunits signs.","type":"text"}],"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/signs"}}}