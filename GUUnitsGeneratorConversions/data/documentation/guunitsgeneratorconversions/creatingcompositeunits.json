{"hierarchy":{"paths":[["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/guunitsgeneratorconversions\/creatingcompositeunits"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A composite unit represents a unit category that contains other unit categories in it’s declaration. For example,","type":"text"},{"text":" ","type":"text"},{"text":"consider a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Velocity"}]},{"text":" unit category. In this category, a velocity unit is represented as a distance divided by some time.","type":"text"},{"text":" ","type":"text"},{"text":"This unit can thus be created by using the unit categories ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TimeUnits","type":"reference","isActive":true},{"text":" together, without specifying","type":"text"},{"text":" ","type":"text"},{"text":"new units.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In this document, we will explore how to define the ","type":"text"},{"code":"Velocity","type":"codeVoice"},{"text":" unit correctly using the protocols provided in this generator.","type":"text"}]},{"type":"heading","level":2,"text":"Prerequisites","anchor":"Prerequisites"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this guide, it is preferred that you read the "},{"type":"reference","isActive":true,"identifier":"gettingstarted"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"creatingnewunits"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"usingcustomcodegeneration"},{"type":"text","text":" guides. These guides will give an overview of the basic package structure"},{"type":"text","text":" "},{"type":"text","text":"of this generator and how you can modify\/add swift files to create new units or language-specific implementations."}]},{"type":"heading","level":2,"text":"The Velocity Unit","anchor":"The-Velocity-Unit"},{"type":"paragraph","inlineContent":[{"text":"Since we want to create a new Velocty unit, we must understand the existing units within this package. Velocity is made up of 2 units:","type":"text"},{"text":" ","type":"text"},{"text":"Distance and Time. These units already exist in this package, but for simplicity I will place the code for these units below (see sections below).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We will want to combine these units into a Velocity unit performing a cartesian product between all cases between the two types. As such, we will","type":"text"},{"text":" ","type":"text"},{"text":"want to support units such as centimetres per millisecond (cm\/ms), millimetres per second (mm\/s) and metres per microsecond (m\/us) to name a few.","type":"text"},{"text":" ","type":"text"},{"text":"Every combination of Distance and Time must be represented by our new Velocity type.","type":"text"}]},{"type":"heading","level":3,"text":"Distance","anchor":"Distance"},{"type":"codeListing","code":["\/\/\/ A Unit for representing distances.","public enum DistanceUnits: String, UnitProtocol {","","    \/\/\/ Millimetres","    case millimetres","","    \/\/\/ Centimetres","    case centimetres","","    \/\/\/ Metres","    case metres","","    \/\/\/ The abbreviation of the unit.","    public var abbreviation: String {","        switch self {","        case .millimetres:","            return \"mm\"","        case .centimetres:","            return \"cm\"","        case .metres:","            return \"m\"","        }","    }","","    \/\/\/ The description of the unit.","    public var description: String {","        self.rawValue","    }","","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Time","anchor":"Time"},{"type":"codeListing","code":["\/\/\/ A type for representing different time units.","public enum TimeUnits: String, UnitProtocol {","","    \/\/\/ Microseconds.","    case microseconds","","    \/\/\/ Milliseconds.","    case milliseconds","","    \/\/\/ Seconds","    case seconds","","    \/\/\/ The abbreviation of the time unit.","    public var abbreviation: String {","        switch self {","        case .microseconds:","            return \"us\"","        case .milliseconds:","            return \"ms\"","        case .seconds:","            return \"s\"","        }","    }","","    \/\/\/ The description of the time unit.","    public var description: String {","        self.rawValue","    }","","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"The CompositeUnit Protocol","anchor":"The-CompositeUnit-Protocol"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start creating our Velocity unit, we must conform to the "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","isActive":true},{"type":"text","text":" protocol. Every "},{"type":"emphasis","inlineContent":[{"text":"composite unit","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"will conform to this protocol. The "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","isActive":true},{"type":"text","text":" protocol also conforms to the standard "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol","isActive":true},{"type":"text","text":" "},{"type":"text","text":"meaning that every "},{"type":"emphasis","inlineContent":[{"type":"text","text":"composite unit"}]},{"type":"text","text":" is also a normal unit. We can start our Velocity unit by using a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" "},{"type":"text","text":"that conforms to this protocol."}]},{"type":"codeListing","code":["public struct Velocity: CompositeUnit {","","    \/\/ ToDo","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","type":"reference","isActive":true},{"type":"text","text":" requires a "},{"code":"baseUnit","type":"codeVoice"},{"type":"text","text":" static property that represents the minimum-required relationship between"},{"type":"text","text":" "},{"type":"text","text":"the normal unit types within the composite unit. This relationship is defined through something called an "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","type":"reference","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","type":"reference","isActive":true},{"type":"text","text":" is simply an abstract notation for defining mathematical relationships. The base unit of our Velocity"},{"type":"text","text":" "},{"type":"text","text":"will be "},{"inlineContent":[{"text":"metres per second","type":"text"}],"type":"emphasis"},{"type":"text","text":", or "},{"code":"DistanceUnits.metres","type":"codeVoice"},{"type":"text","text":" divided by "},{"code":"TimeUnits.seconds","type":"codeVoice"},{"type":"text","text":". We will use the following"},{"type":"text","text":" "},{"type":"text","text":"code to represent this relationship using the "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","type":"reference","isActive":true},{"type":"text","text":" enumeration."}]},{"type":"codeListing","code":["\/\/\/ Defines a velocity unit with a base unit of metres per second.","public struct Velocity: CompositeUnit {","","    \/\/\/ The base unit (SI m\/s).","    public static let baseUnit: Operation = .division(","        lhs: .constant(declaration: AnyUnit(DistanceUnits.metres)),","        rhs: .constant(declaration: AnyUnit(TimeUnits.seconds))","    )","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This code will not compile in it’s current state until we address a few more requirements in this type definition. For starters,","type":"text"},{"text":" ","type":"text"},{"text":"the Velocity unit has not finished providing all properties for the ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","isActive":true,"type":"reference"},{"text":" conformance. We must add in a ","type":"text"},{"code":"unit","type":"codeVoice"},{"text":" ","type":"text"},{"text":"property and an initialiser.","type":"text"}]},{"type":"codeListing","code":["\/\/\/ Defines a velocity unit with a base unit of metres per second.","public struct Velocity: CompositeUnit {","","    \/\/\/ The base unit (SI m\/s).","    public static let baseUnit: Operation = .division(","        lhs: .constant(declaration: AnyUnit(DistanceUnits.metres)),","        rhs: .constant(declaration: AnyUnit(TimeUnits.seconds))","    )","","    \/\/\/ A instance of this unit category.","    public let unit: Operation","","    \/\/\/ Initialise the Velocity from a derivation of the `baseUnit`.","    \/\/\/ - Parameter unit: The operation representing this unit. This parameter","    \/\/\/ must be a derivation of `baseUnit`. It cannot have a different structure.","    public init(unit: Operation) {","        self.unit = unit","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Velocity code is now finished and ready to be compiled. For most composite units, this implementation is enough"},{"type":"text","text":" "},{"type":"text","text":"to define a new composite unit. In some cases, the normal units within the composite unit may not conform to the"},{"type":"text","text":" "},{"type":"text","text":"protocols required to allow type-erasure using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/AnyUnit"},{"type":"text","text":". This is the case for this example, so we will now"},{"type":"text","text":" "},{"type":"text","text":"examine how to change "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TimeUnits"},{"type":"text","text":" to meet this conformance."}]},{"type":"heading","level":2,"text":"Making Existing Units Convertible","anchor":"Making-Existing-Units-Convertible"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To allow type-erase through the "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/AnyUnit","isActive":true},{"type":"text","text":" struct, we must conform "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TimeUnits","isActive":true},{"type":"text","text":" to the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible","isActive":true},{"type":"text","text":" protocol. This protocol defines functions that generate an "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","isActive":true},{"type":"text","text":" for a conversion"},{"type":"text","text":" "},{"type":"text","text":"between unit types within the same category. Both our "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TimeUnits","isActive":true},{"type":"text","text":" use SI units in their"},{"type":"text","text":" "},{"type":"text","text":"definition, therefore we can use an additional protocol to make this easy."}]},{"type":"paragraph","inlineContent":[{"text":"Since SI units use a prefixed base-10 notation in their unit derivations, we may use the protocol ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Base10UnitsConvertible","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"instead of ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible","isActive":true,"type":"reference"},{"text":" to achieve the conformance for type-erasure. This protocol will create the conversion","type":"text"},{"text":" ","type":"text"},{"text":"functions automatically for units that conform to it. The only thing we need to specify is the power of 10 each unit","type":"text"},{"text":" ","type":"text"},{"text":"is represented as. For example, millimetres is 10^-3 metres, and centimetres is 10^-2 metres. These powers of 10","type":"text"},{"text":" ","type":"text"},{"text":"will be represented inside a static dictionary property called exponents. Our distance and time types will thus","type":"text"},{"text":" ","type":"text"},{"text":"change to include the code below. Once we have provided this conformance, our code should now compile.","type":"text"}]},{"type":"heading","level":3,"text":"Distance","anchor":"Distance"},{"type":"codeListing","code":["\/\/\/ A Unit for representing distances.","public enum DistanceUnits: String, UnitProtocol, Base10UnitsConvertible {","","    \/\/\/ Millimetres","    case millimetres","","    \/\/\/ Centimetres","    case centimetres","","    \/\/\/ Metres","    case metres","","    \/\/\/ The exponents of the units expressed as base 10.","    public static let exponents: [DistanceUnits: Int] = [","        .millimetres: -3,","        .centimetres: -2,","        .metres: 0","    ]","","    \/\/\/ The abbreviation of the unit.","    public var abbreviation: String {","        switch self {","        case .millimetres:","            return \"mm\"","        case .centimetres:","            return \"cm\"","        case .metres:","            return \"m\"","        }","    }","","    \/\/\/ The description of the unit.","    public var description: String {","        self.rawValue","    }","","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Time","anchor":"Time"},{"type":"codeListing","code":["\/\/\/ A type for representing different time units.","public enum TimeUnits: String, UnitProtocol, Base10UnitsConvertible {","","    \/\/\/ Microseconds.","    case microseconds","","    \/\/\/ Milliseconds.","    case milliseconds","","    \/\/\/ Seconds","    case seconds","","    \/\/\/ The exponents of the units expressed as base 10.","    public static let exponents: [TimeUnits: Int] = [","        .microseconds: -6,","        .milliseconds: -3,","        .seconds: 0","    ]","","    \/\/\/ The abbreviation of the time unit.","    public var abbreviation: String {","        switch self {","        case .microseconds:","            return \"us\"","        case .milliseconds:","            return \"ms\"","        case .seconds:","            return \"s\"","        }","    }","","    \/\/\/ The description of the time unit.","    public var description: String {","        self.rawValue","    }","","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"Creating the C Code","anchor":"Creating-the-C-Code"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point, we have correctly defined the Velocity unit category. We now have a choice on the best approach for"},{"type":"text","text":" "},{"type":"text","text":"implementing the C code. The first option is to follow the previous guide for "},{"isActive":true,"type":"reference","identifier":"usingcustomcodegeneration","overridingTitle":"Creating Custom Code Generation","overridingTitleInlineContent":[{"type":"text","text":"Creating Custom Code Generation"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the second is to conform Velocity to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"type":"text","text":" and use an existing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator"},{"type":"text","text":" for this purpose."},{"type":"text","text":" "},{"type":"text","text":"We will demonstrate the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"type":"text","text":" approach."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach is far simpler than all previous approaches thus far. You simply have to conform Velocty to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"type":"text","text":"."}]},{"type":"codeListing","code":["public extension Velocity: UnitsConvertible {}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default implementations of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"type":"text","text":" will create the conversion functions automatically since Velocity is a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit"},{"type":"text","text":". You may also provide your own implementation by providing your own "},{"type":"codeVoice","code":"conversion(to: ) -> Operation"},{"type":"text","text":" function:"}]},{"type":"codeListing","code":["public extension Velocity: UnitsConvertible {","","    func conversion(to unit: Velocity) -> Operation {","        \/\/ ToDo","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is in no way required, but the option is open for types that may require it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","isActive":true,"type":"reference"},{"text":" called ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalFunctionBodyCreator","isActive":true,"type":"reference"},{"text":" is already provided for types that conform to ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You may use this type in the top module to generate the C code.","type":"text"}]},{"type":"heading","level":2,"text":"Putting it all Together","anchor":"Putting-it-all-Together"},{"type":"paragraph","inlineContent":[{"text":"We will now add all of the code into the top module for source code generation. The steps in this section are identical to the last steps","type":"text"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"overridingTitle":"Creating New Units","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Creating New Units"}],"identifier":"creatingnewunits"},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"Adding the Extension to UnitsGenerator","anchor":"Adding-the-Extension-to-UnitsGenerator"},{"type":"paragraph","inlineContent":[{"text":"You must still add the extensions onto the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","code":["\/\/\/ Velocity initialiser for C conversions.","extension UnitsGenerator where","    Creator == CompositeFunctionCreator<OperationalFunctionBodyCreator<Velocity>,","    CFunctionDefinitionCreator<Velocity>, NumericTypeConverter> {","","    \/\/\/ Initialise using Velocity and c conversions.","    public init() {","        self.init(creator: CompositeFunctionCreator(","            bodyCreator: OperationalFunctionBodyCreator(),","            definitionCreator: CFunctionDefinitionCreator(),","            numericConverter: NumericTypeConverter()","        ))","    }","","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Adding the C Source Generation Code","anchor":"Adding-the-C-Source-Generation-Code"},{"type":"paragraph","inlineContent":[{"text":"You must change the ","type":"text"},{"code":"generateCFiles","type":"codeVoice"},{"text":" function in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator","type":"reference"},{"text":" to include the new C code. A type alias already exists to create","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalGenerator","type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","code":["public struct GUUnitsGenerator {","","    \/\/ ...","","    public func generateCFiles(in path: URL) throws {","        \/\/ ...","        let velocityGenerator = AnyGenerator(generating: Velocity.self, using: OperationalGenerator())","        let fileContents = HeaderCreator().generate(","            generators: [","                \/\/ ...","                velocityGenerator","            ]","        )","        .data(using: .utf8)","        \/\/ ...","        let cContents = CFileCreator().generate(","            generators: [","                \/\/ ...","                velocityGenerator","            ]","        )","        .data(using: .utf8)","        \/\/ ...","    }","","    \/\/ ...","","}",""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must not forget to change "},{"type":"codeVoice","code":"typeDefs"},{"type":"text","text":" in "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/HeaderCreator","isActive":true,"type":"reference"},{"type":"text","text":" to include your new unit."}]},{"type":"codeListing","code":["public struct HeaderCreator {","","    \/\/ ...","","    private var typeDefs: String {","        let units: [(String, [CustomStringConvertible])] = [","            \/\/ ...","            (\"\/\/ Velocity Units.\", Array(Velocity.allCases))","        ]","        \/\/ ...","    }","","    \/\/ ...","","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"C Test Generation","anchor":"C-Test-Generation"},{"type":"paragraph","inlineContent":[{"text":"As our units work off a ","type":"text"},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","isActive":true},{"text":", we may automatically generate the test code by inspecting the","type":"text"},{"text":" ","type":"text"},{"text":"structure of the categories ","type":"text"},{"type":"codeVoice","code":"baseUnit"},{"text":" property. This process is automatically handled by conforming to","type":"text"},{"text":" ","type":"text"},{"text":"a protocol called ","type":"text"},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable","isActive":true},{"text":" and using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestGenerator","isActive":true},{"text":".","type":"text"}]},{"type":"codeListing","code":["extension Velocity: OperationalTestable {","","    public static let testParameters: [ConversionMetaData<Velocity>: [TestParameters]] = defaultParameters","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see in the code above, that we have conformed to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable"},{"type":"text","text":" by creating a static stored"},{"type":"text","text":" "},{"type":"text","text":"property called "},{"type":"codeVoice","code":"testParameters"},{"type":"text","text":". This property uses an underlying computed property called "},{"type":"codeVoice","code":"defaultParameters"},{"type":"text","text":" "},{"type":"text","text":"that is provided by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable"},{"type":"text","text":" as part of it’s default implementation. Using this property"},{"type":"text","text":" "},{"type":"text","text":"will create tests for a number of pre-defined values and edge cases. If you would like to add more custom"},{"type":"text","text":" "},{"type":"text","text":"tests, then you may add then to "},{"type":"codeVoice","code":"testParameters"},{"type":"text","text":" yourself. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConversionMetaData"},{"type":"text","text":" type simply stores"},{"type":"text","text":" "},{"type":"text","text":"the conversion information, i.e. the type converting from and the type converting to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We may now follow the same process for adding tests as normal units, but instead we may use the "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestGenerator","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Our test generation code in "},{"type":"codeVoice","code":"GUUnitsGenerator.swift"},{"type":"text","text":" will now contain the following lines for velocity:"}]},{"type":"codeListing","code":["public struct GUUnitsGenerator {","","    \/\/ ...","","    public func generateCTests(in path: URL) {","        \/\/ ...","        let velocityGenerator = OperationalTestGenerator<Velocity>()","        let velocityFileCreator = TestFileCreator<OperationalTestGenerator<Velocity>>()","        createTestFiles(","            at: path,","            with: velocityFileCreator.tests(generator: velocityGenerator, imports: \"import CGUUnits\")","        )","        \/\/ ...","    }","","    \/\/ ...","","}",""],"syntax":"swift"},{"type":"heading","level":3,"text":"Swift Source and Test Generation","anchor":"Swift-Source-and-Test-Generation"},{"type":"paragraph","inlineContent":[{"text":"Finally, we must follow a similar procedure to add the swift sources and tests.","type":"text"}]},{"type":"codeListing","code":["public struct GUUnitsGenerator {","","    \/\/ ...","","    public func generateSwiftFiles(in path: URL) {","        \/\/ ...","        writeFile(at: path, with: Velocity.category, and: swiftFileCreator.generate(for: Velocity.self))","        \/\/ ...","    }","","    \/\/\/ Generate files that test the swift layer of guunits.","    \/\/\/ - Parameter path: The folder containing the test files.","    public func generateSwiftTests(in path: URL) {","        \/\/ ...","        createTestFiles(at: path, with: swiftFileCreator.generate(with: OperationalTestGenerator<Velocity>()))","        \/\/ ...","    }","","    \/\/ ...","","}"],"syntax":"swift"}]}],"sections":[],"kind":"article","identifier":{"url":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Article","modules":[{"name":"GUUnitsGeneratorConversions"}],"role":"article","title":"Creating Composite Units"},"seeAlsoSections":[{"identifiers":["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories"],"generated":true,"title":"Essentials"}],"abstract":[{"text":"This guide demonstrates the process for creating ","type":"text"},{"inlineContent":[{"type":"text","text":"composite units"}],"type":"emphasis"},{"text":". A composite unit is a unit category","type":"text"},{"text":" ","type":"text"},{"text":"that is created from other units.","type":"text"}],"references":{"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/OperationalGenerator":{"type":"topic","role":"symbol","title":"OperationalGenerator","kind":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalGenerator","navigatorTitle":[{"text":"OperationalGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/operationalgenerator","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OperationalGenerator","kind":"identifier"}],"abstract":[{"text":"Generator used for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit"},{"text":" types.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/ConvertingBetweenCategories":{"type":"topic","role":"article","title":"Coverting Between Categories","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories","url":"\/documentation\/guunitsgeneratorconversions\/convertingbetweencategories","abstract":[{"text":"This guide provides instructions for creating relations between different unit categories. A user may use a relation to convert a unit","type":"text"},{"text":" ","type":"text"},{"text":"into another unit from a different category.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Base10UnitsConvertible":{"url":"\/documentation\/guunitsgeneratorconversions\/base10unitsconvertible","kind":"symbol","abstract":[{"text":"Protocol that helps units conformance to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"text":" that use units","type":"text"},{"text":" ","type":"text"},{"text":"that are displaced using base10 increments. For example, this protocol can be used","type":"text"},{"text":" ","type":"text"},{"text":"with SI units utilising the SI prefixes nano (10^-9), micro (10^-6), milli (10^-3),","type":"text"},{"text":" ","type":"text"},{"text":"centi (10^-2), kilo (10^3), mega (10^6), etc. The ","type":"text"},{"type":"codeVoice","code":"exponents"},{"text":" static constant expresses","type":"text"},{"text":" ","type":"text"},{"text":"each unit to the exponent used in the base 10 calculation, E.g. millimetres would have","type":"text"},{"text":" ","type":"text"},{"text":"an exponent of -3 since it uses the milli prefix.","type":"text"}],"title":"Base10UnitsConvertible","role":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Base10UnitsConvertible","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Base10UnitsConvertible"}],"navigatorTitle":[{"kind":"identifier","text":"Base10UnitsConvertible"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Operation":{"navigatorTitle":[{"kind":"identifier","text":"Operation"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Operation"}],"url":"\/documentation\/guunitsgeneratorconversions\/operation","role":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","abstract":[{"type":"text","text":"Enum for defining common operations in a composite unit."}],"title":"Operation","kind":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/ConversionMetaData":{"kind":"symbol","title":"ConversionMetaData","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConversionMetaData","kind":"identifier"}],"navigatorTitle":[{"text":"ConversionMetaData","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/conversionmetadata","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConversionMetaData","abstract":[{"text":"A struct for storing information about a unit conversion within the same","type":"text"},{"text":" ","type":"text"},{"text":"category.","type":"text"}],"role":"symbol"},"creatingnewunits":{"type":"link","title":"Creating New Units","identifier":"creatingnewunits","titleInlineContent":[{"text":"Creating New Units","type":"text"}],"url":"creatingnewunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/OperationalTestGenerator":{"kind":"symbol","title":"OperationalTestGenerator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OperationalTestGenerator"}],"navigatorTitle":[{"kind":"identifier","text":"OperationalTestGenerator"}],"url":"\/documentation\/guunitsgeneratorconversions\/operationaltestgenerator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestGenerator","abstract":[{"type":"text","text":"A "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","isActive":true},{"type":"text","text":" that uses the parameters specified in "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable","isActive":true},{"type":"text","text":"."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingNewUnits":{"type":"topic","role":"article","title":"Creating New Units","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","url":"\/documentation\/guunitsgeneratorconversions\/creatingnewunits","abstract":[{"text":"Provides a guide and example for creating new units.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GUUnitsGenerator":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GUUnitsGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"GUUnitsGenerator","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator","title":"GUUnitsGenerator","abstract":[{"text":"Create the source files the C and swift targets of guunits.","type":"text"}],"url":"\/documentation\/guunitsgeneratorconversions\/guunitsgenerator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestParameters":{"kind":"symbol","title":"TestParameters","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestParameters","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestParameters"}],"url":"\/documentation\/guunitsgeneratorconversions\/testparameters","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","abstract":[{"text":"Class for storing expected test result from an input.","type":"text"}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/OperationalFunctionBodyCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/operationalfunctionbodycreator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OperationalFunctionBodyCreator","kind":"identifier"}],"kind":"symbol","title":"OperationalFunctionBodyCreator","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","isActive":true,"type":"reference"},{"text":" that works with ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible","isActive":true,"type":"reference"},{"text":" types.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalFunctionBodyCreator","navigatorTitle":[{"text":"OperationalFunctionBodyCreator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions":{"kind":"symbol","title":"GUUnitsGeneratorConversions","type":"topic","url":"\/documentation\/guunitsgeneratorconversions","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions","abstract":[{"type":"text","text":"A target for generating the GUUnits package."}],"role":"collection"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/OperationalTestable":{"kind":"symbol","title":"OperationalTestable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"OperationalTestable"}],"navigatorTitle":[{"kind":"identifier","text":"OperationalTestable"}],"url":"\/documentation\/guunitsgeneratorconversions\/operationaltestable","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable","abstract":[{"type":"text","text":"A type that specifies it’s own "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","isActive":true},{"type":"text","text":" for conversions within the"},{"type":"text","text":" "},{"type":"text","text":"category."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitsConvertible":{"url":"\/documentation\/guunitsgeneratorconversions\/unitsconvertible","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitsConvertible","kind":"identifier"}],"kind":"symbol","title":"UnitsConvertible","abstract":[{"text":"This protocol provides conversion functions for units within the same category.","type":"text"},{"text":" ","type":"text"},{"text":"The conversion functions produce an ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","isActive":true,"type":"reference"},{"text":" that will define the function required","type":"text"},{"text":" ","type":"text"},{"text":"to perform the conversion.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible","navigatorTitle":[{"text":"UnitsConvertible","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/HeaderCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/headercreator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HeaderCreator","kind":"identifier"}],"kind":"symbol","title":"HeaderCreator","abstract":[{"text":"Struct for creating the C header file.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/HeaderCreator","navigatorTitle":[{"text":"HeaderCreator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/DistanceUnits":{"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/distanceunits","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DistanceUnits","kind":"identifier"}],"navigatorTitle":[{"text":"DistanceUnits","kind":"identifier"}],"title":"DistanceUnits","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/DistanceUnits","role":"symbol","abstract":[{"text":"A Unit for representing distances.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GettingStarted":{"type":"topic","role":"article","title":"Getting Started","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","url":"\/documentation\/guunitsgeneratorconversions\/gettingstarted","abstract":[{"type":"codeVoice","code":"GUUnitsGeneratorConversions"},{"text":" is the main target of ","type":"text"},{"type":"codeVoice","code":"guunits_generator"},{"text":". This target provides the unit and category","type":"text"},{"text":" ","type":"text"},{"text":"definitions for all the code generated in ","type":"text"},{"type":"codeVoice","code":"GUUnits"},{"text":".","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitsGenerator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"topic","navigatorTitle":[{"text":"UnitsGenerator","kind":"identifier"}],"abstract":[{"text":"Struct that generates the code for all the possible conversion functions.","type":"text"}],"role":"symbol","title":"UnitsGenerator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitsGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/unitsgenerator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CompositeUnit":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompositeUnit"}],"url":"\/documentation\/guunitsgeneratorconversions\/compositeunit","type":"topic","title":"CompositeUnit","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","abstract":[{"text":"Defines a category that is created from relationships of other units. This protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defines a class of unit that uses different "},{"type":"codeVoice","code":"UnitProtocol"},{"type":"text","text":" types"},{"type":"text","text":" "},{"type":"text","text":"in it’s definition."}],"navigatorTitle":[{"kind":"identifier","text":"CompositeUnit"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/FunctionBodyCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/functionbodycreator","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FunctionBodyCreator","kind":"identifier"}],"kind":"symbol","title":"FunctionBodyCreator","abstract":[{"text":"Protocol that generates the code for the implementation of a conversion function.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","navigatorTitle":[{"text":"FunctionBodyCreator","kind":"identifier"}]},"gettingstarted":{"type":"link","title":"Getting Started","identifier":"gettingstarted","titleInlineContent":[{"text":"Getting Started","type":"text"}],"url":"gettingstarted"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TimeUnits":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TimeUnits","role":"symbol","abstract":[{"type":"text","text":"A type for representing different time units."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeUnits"}],"title":"TimeUnits","navigatorTitle":[{"kind":"identifier","text":"TimeUnits"}],"url":"\/documentation\/guunitsgeneratorconversions\/timeunits","type":"topic","kind":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UsingCustomCodeGeneration":{"type":"topic","role":"article","title":"Using Custom Code Generation","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","url":"\/documentation\/guunitsgeneratorconversions\/usingcustomcodegeneration","abstract":[{"text":"This document provides a guide for creating custom source and test generation for a unit category that requires","type":"text"},{"text":" ","type":"text"},{"text":"custom conversion functions.","type":"text"}]},"usingcustomcodegeneration":{"type":"link","title":"Using Custom Code Generation","identifier":"usingcustomcodegeneration","titleInlineContent":[{"text":"Using Custom Code Generation","type":"text"}],"url":"usingcustomcodegeneration"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/AnyUnit":{"url":"\/documentation\/guunitsgeneratorconversions\/anyunit","navigatorTitle":[{"text":"AnyUnit","kind":"identifier"}],"kind":"symbol","title":"AnyUnit","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyUnit","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/AnyUnit","abstract":[{"type":"text","text":"A struct for type-erased units conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsConvertible"},{"type":"text","text":"."}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestGenerator":{"kind":"symbol","title":"TestGenerator","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"TestGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/testgenerator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","abstract":[{"type":"text","text":"Conforming types will generate test parameters for a specific unit."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitProtocol":{"url":"\/documentation\/guunitsgeneratorconversions\/unitprotocol","navigatorTitle":[{"text":"UnitProtocol","kind":"identifier"}],"kind":"symbol","title":"UnitProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitProtocol","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitProtocol","abstract":[{"type":"text","text":"A protocol for representing unit types that exist within a unit category."},{"type":"text","text":" "},{"type":"text","text":"A unit category represents a type of data that can be expressed with different"},{"type":"text","text":" "},{"type":"text","text":"units. Examples include Distance, Time, Angles, etc. Conforming types might"},{"type":"text","text":" "},{"text":"contain many units for a category, e.g. Distance can have metres, centimetres,","type":"text"},{"text":" ","type":"text"},{"text":"millimetres, etc.","type":"text"}]}}}