{"sections":[],"hierarchy":{"paths":[["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions"]]},"kind":"article","abstract":[{"text":"This document provides a guide for creating custom source and test generation for a unit category that requires","type":"text"},{"text":" ","type":"text"},{"text":"custom conversion functions.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/guunitsgeneratorconversions\/usingcustomcodegeneration"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","interfaceLanguage":"swift"},"metadata":{"title":"Using Custom Code Generation","modules":[{"name":"GUUnitsGeneratorConversions"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before reading this guide, please read the "},{"isActive":true,"identifier":"gettingstarted","type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"creatingnewunits","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"guides."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will focus on creating types that conform to "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","isActive":true},{"type":"text","text":" for source generation and "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","isActive":true},{"type":"text","text":" "},{"type":"text","text":"for test generation. We will be using the "},{"type":"codeVoice","code":"Angle"},{"type":"text","text":" category for this example. An "},{"type":"codeVoice","code":"Angle"},{"type":"text","text":" can be represented as either"},{"type":"text","text":" "},{"type":"text","text":"degrees or radians. Our unit category needs to be able to convert between the 2 in a type-safe manner."}]},{"text":"Defining the Unit","type":"heading","anchor":"Defining-the-Unit","level":2},{"type":"paragraph","inlineContent":[{"text":"The first step in creating a new unit is to define the unit category.","type":"text"}]},{"type":"codeListing","code":["\/\/\/ A unit that represents angles.","public enum AngleUnits: String {","","    \/\/\/ An angle represented in degrees.","    case degrees","","    \/\/\/ An angle represented in radians.","    case radians","","}","","\/\/\/ UnitProtocol conformance.","extension AngleUnits: UnitProtocol {","","    \/\/\/ The abbreviation of the unit.","    public var abbreviation: String {","        switch self {","        case .degrees:","            return \"deg\"","        case .radians:","            return \"rad\"","        }","    }","","    \/\/\/ The description of the unit.","    public var description: String {","        self.rawValue","    }","","}"],"syntax":"swift"},{"text":"Source Generation","type":"heading","anchor":"Source-Generation","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The conversion between degrees and radians is "},{"code":"degrees = radians * 180 \/ π","type":"codeVoice"},{"type":"text","text":", and "},{"code":"radians = degrees * π \/ 180","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To implement this conversion, we will need to provide a custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator"},{"type":"text","text":". We will call it"},{"type":"text","text":" "},{"code":"AngleFunctionCreator","type":"codeVoice"},{"type":"text","text":" and provide the "},{"code":"createFunction","type":"codeVoice"},{"type":"text","text":" method from the protocol. This method defines"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"C","type":"codeVoice"},{"type":"text","text":" code for the function body that performs the conversion. This method needs to provide appropriate"},{"type":"text","text":" "},{"type":"text","text":"code for all combinations of unit conversions. In our case, this is simply degrees to radians and radians"},{"type":"text","text":" "},{"type":"text","text":"to degrees. In addition to this conversion, we also need to support conversion from the different unit"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Signs"},{"type":"text","text":", i.e. "},{"code":"degrees_t","type":"codeVoice"},{"type":"text","text":" to "},{"code":"degrees_f","type":"codeVoice"},{"type":"text","text":" or "},{"code":"degrees_u","type":"codeVoice"},{"type":"text","text":" to "},{"code":"radians_d","type":"codeVoice"},{"type":"text","text":" for example. The "},{"code":"C","type":"codeVoice"},{"type":"text","text":" implementation"},{"type":"text","text":" "},{"type":"text","text":"must also check for potential overflows and clamp the values at their maximum and minimum when this occurs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a sign conversion with the same unit type (eg. "},{"type":"codeVoice","code":"degrees_f"},{"type":"text","text":" to "},{"type":"codeVoice","code":"degrees_d"},{"type":"text","text":"), we provide a helper struct"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SignConverter"},{"type":"text","text":" that will generate the code that correctly performs this conversion. The code that"},{"type":"text","text":" "},{"type":"text","text":"generates the "},{"type":"codeVoice","code":"C"},{"type":"text","text":" conversion for the angle conversions is shown below."}]},{"type":"codeListing","code":["\/\/\/ Struct that defines conversion functions between angle units.","public struct AngleFunctionCreator: FunctionBodyCreator {","","    \/\/\/ Helper object used to create sign conversion functions.","    private let signConverter = SignConverter()","","    \/\/\/ Default init.","    public init() {}","","    \/\/ swiftlint:disable function_body_length","","    \/\/\/ Generates C-code that will perform a cast between different angle units.","    \/\/\/ - Parameters:","    \/\/\/   - unit: The unit to convert from.","    \/\/\/   - otherUnit: The unit to convert to.","    \/\/\/   - sign: The sign of the first unit.","    \/\/\/   - otherSign: The sign of the second unit.","    \/\/\/ - Returns: Generated C-code that performs the conversion.","    public func createFunction(","        unit: AngleUnits, to otherUnit: AngleUnits, sign: Signs, otherSign: Signs","    ) -> String {","        switch (unit, otherUnit) {","        case (.degrees, .radians):","            guard otherSign != .d else {","                return \"    return ((radians_d) (((double) (\\(unit))) \/ 180.0 * M_PI));\"","            }","            let max = \"((double) (\\(otherSign.numericType.limits.1)))\"","            let min = \"((double) (\\(otherSign.numericType.limits.0)))\"","            let roundString: String","            if otherSign.isFloatingPoint {","                roundString = \"((radians_\\(otherSign)) (castedValue \/ 180.0 * M_PI))\"","            } else {","                roundString = \"((radians_\\(otherSign)) (round(castedValue \/ 180.0 * M_PI)))\"","            }","            return \"\"\"","                const double maxValue = \\(max) \/ M_PI * 180.0;","                const double minValue = \\(min) \/ M_PI * 180.0;","                const double castedValue = ((double) (\\(unit)));","                if (castedValue > maxValue) {","                    return \\(otherSign.numericType.limits.1);","                }","                if (castedValue < minValue) {","                    return \\(otherSign.numericType.limits.0);","                }","                return \\(roundString);","            \"\"\"","        case (.radians, .degrees):","            let max = \"((double) (\\(otherSign.numericType.limits.1))) \/ 180.0 * M_PI\"","            let min = \"((double) (\\(otherSign.numericType.limits.0))) \/ 180.0 * M_PI\"","            let roundString: String","            if otherSign.isFloatingPoint {","                roundString = \"((degrees_\\(otherSign)) (castedValue \/ M_PI * 180.0))\"","            } else {","                roundString = \"((degrees_\\(otherSign)) (round(castedValue \/ M_PI * 180.0)))\"","            }","            return \"\"\"","                const double maxValue = \\(max);","                const double minValue = \\(min);","                const double castedValue = ((double) (\\(unit)));","                if (castedValue > maxValue) {","                    return \\(otherSign.numericType.limits.1);","                }","                if (castedValue < minValue) {","                    return \\(otherSign.numericType.limits.0);","                }","                return \\(roundString);","            \"\"\"","        default:","            return self.castFunc(forUnit: unit, sign: sign, otherSign: otherSign)","        }","    }","","    \/\/ swiftlint:enable function_body_length","","    \/\/\/ Generates a standard sign conversion for identical unit types.","    \/\/\/ - Parameters:","    \/\/\/   - unit: The unit to change sign.","    \/\/\/   - sign: The sign of the unit.","    \/\/\/   - otherSign: The sign to change into.","    \/\/\/ - Returns: The generated C-code that performs the sign conversion.","    func castFunc(forUnit unit: Unit, sign: Signs, otherSign: Signs) -> String {","        \"    return \\(self.signConverter.convert(\"\\(unit)\", otherUnit: unit, from: sign, to: otherSign));\"","    }","","    \/\/\/ Function that indicates whether a round operation needs to happen during a conversion.","    \/\/\/ - Parameters:","    \/\/\/   - sign: The sign of the first parameter.","    \/\/\/   - otherSign: The sign of the second parameter.","    \/\/\/ - Returns: Whether a round operation needs to occur.","    private func shouldRound(from sign: Signs, to otherSign: Signs) -> Bool {","        (sign == .d || sign == .f) && (otherSign != .d && otherSign != .f)","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We still need to add the extension and ","type":"text"},{"type":"codeVoice","code":"typealias"},{"text":" to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator"},{"text":" for this new type.","type":"text"}]},{"type":"codeListing","code":["\/\/\/ AngleUnits initialiser for C conversions.","extension UnitsGenerator where","    Creator == CompositeFunctionCreator<","        AngleFunctionCreator,","        CFunctionDefinitionCreator<AngleUnits>,","        NumericTypeConverter","    > {","","    \/\/\/ Initialise using AngleUnits and C conversions.","    \/\/\/ - Parameters:","    \/\/\/   - bodyCreator: The creator which generates function bodies.","    \/\/\/   - definitionCreator: The definitionCreate which generates function definitions.","    \/\/\/   - numericConverter: The numericConverter which generates numeric type conversions.","    \/\/\/   - helpers: The helpers which generate function names and some definitions.","    public init(","        bodyCreator: AngleFunctionCreator = AngleFunctionCreator(),","        definitionCreator: CFunctionDefinitionCreator<AngleUnits> = CFunctionDefinitionCreator(),","        numericConverter: NumericTypeConverter = NumericTypeConverter(),","        helpers: FunctionHelpers<Creator.Unit> = FunctionHelpers<Creator.Unit>()","    ) {","        self.init(creator: CompositeFunctionCreator(","            bodyCreator: bodyCreator,","            definitionCreator: definitionCreator,","            numericConverter: numericConverter","        ))","    }","","}","","\/\/\/ Angle Units Generator.","public typealias AngleUnitsGenerator = UnitsGenerator<","    CompositeFunctionCreator<","        AngleFunctionCreator,","        CFunctionDefinitionCreator<AngleUnits>,","        NumericTypeConverter","    >",">"],"syntax":"swift"},{"text":"Test Generation","type":"heading","anchor":"Test-Generation","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we move on to generating the code that will test our generated source code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Testing this code is incredibly cumbersome, so we have provided protocols with default"},{"type":"text","text":" "},{"type":"text","text":"implementations in the test target to make this easier. To create tests for your new type,"},{"type":"text","text":" "},{"type":"text","text":"you will have to conform to "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","isActive":true},{"type":"text","text":" and implement the three functions defined"},{"type":"text","text":" "},{"type":"text","text":"in that protocol. Each function represents a type of test (unit to unit conversion, unit"},{"type":"text","text":" "},{"type":"text","text":"to numeric conversion or numeric to unit conversion). The purpose of these functions is to"},{"type":"text","text":" "},{"type":"text","text":"generate an array of input to output relations using "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","isActive":true},{"type":"text","text":" for each conversion."},{"type":"text","text":" "},{"type":"text","text":"The generator code may then take these relations and generate "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" test cases. The"},{"type":"text","text":" "},{"type":"text","text":"extensions of "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","isActive":true},{"type":"text","text":" provide functions called "},{"type":"codeVoice","code":"defaultParameters"},{"type":"text","text":" that provide"},{"type":"text","text":" "},{"type":"text","text":"the default implemntation for the numeric conversions. You will need to delegate to these"},{"type":"text","text":" "},{"type":"text","text":"functions in your conformance if you wish to use the default parameters. Using the default"},{"type":"text","text":" "},{"type":"text","text":"parameters should be sufficient for the numeric conversions. Our new test generator"},{"type":"text","text":" "},{"type":"text","text":"will look like the code below to begin with."}]},{"type":"codeListing","code":["struct AngleTestGenerator: TestGenerator {","","    typealias UnitType = AngleUnits","","    func testParameters(","        from unit: AngleUnits, with sign: Signs, to otherUnit: AngleUnits, with otherSign: Signs","    ) -> [TestParameters] {","        \/\/ Need to implement...","    }","","    func testParameters(","        from unit: AngleUnits, with sign: Signs, to numeric: NumericTypes","    ) -> [TestParameters] {","        self.defaultParameters(from: unit, with: sign, to: numeric)","    }","","    func testParameters(","        from numeric: NumericTypes, to unit: AngleUnits, with sign: Signs","    ) -> [TestParameters] {","        self.defaultParameters(from: numeric, to: unit, with: sign)","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, if we wanted to test a conversion from a "},{"type":"codeVoice","code":"degrees_t"},{"type":"text","text":" value of "},{"inlineContent":[{"type":"text","text":"180 degrees"}],"type":"emphasis"},{"type":"text","text":" to "},{"type":"codeVoice","code":"radians_t"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we would introduce a test parameter in our new test generator."}]},{"type":"codeListing","code":["struct AngleTestGenerator: TestGenerator {","","    typealias UnitType = AngleUnits","","    func testParameters(","        from unit: AngleUnits, with sign: Signs, to otherUnit: AngleUnits, with otherSign: Signs","    ) -> [TestParameters] {","        var testParameters: [TestParameters] = []","        if unit == .degrees && sign == .t && otherUnit == .radians && otherSign == .t {","            testParameters += [TestParameters(input: \"180\", output: \"3\")]","        }","        return testParameters","    }","","    func testParameters(","        from unit: AngleUnits, with sign: Signs, to numeric: NumericTypes","    ) -> [TestParameters] {","        self.defaultParameters(from: unit, with: sign, to: numeric)","    }","","    func testParameters(","        from numeric: NumericTypes, to unit: AngleUnits, with sign: Signs","    ) -> [TestParameters] {","        self.defaultParameters(from: numeric, to: unit, with: sign)","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can see how this process can be incredibly cumbersome. You should try and test the edge cases by using the","type":"text"},{"text":" ","type":"text"},{"text":"limits of the underlying numeric types (eg. ","type":"text"},{"code":"Signs.t.numericType.swiftType.limits","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please look at the "},{"code":"AngleTestGenerator","type":"codeVoice"},{"type":"text","text":" tests in the test target for the code that tests this struct."}]},{"text":"Performing Code Generation with the New Type","type":"heading","anchor":"Performing-Code-Generation-with-the-New-Type","level":2},{"type":"paragraph","inlineContent":[{"text":"Now we will alter the top-level generator to include our new custom type. The top-level module that performs the","type":"text"},{"text":" ","type":"text"},{"text":"code generation is ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator"},{"text":" and provides functions for generating the C and Swift code for ","type":"text"},{"code":"GUUnits","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Seen below is the code that you will need to add to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator"},{"text":" to perform the code generation of the","type":"text"},{"text":" ","type":"text"},{"text":"new unit. You will need to modify the ","type":"text"},{"code":"generateCFiles","type":"codeVoice"},{"text":", ","type":"text"},{"code":"generateCTests","type":"codeVoice"},{"text":", ","type":"text"},{"code":"generateSwiftFiles","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"generateSwiftTests","type":"codeVoice"},{"text":" functions. You will need to use the existing structs for generating the different source and","type":"text"},{"text":" ","type":"text"},{"text":"test files, namely ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/HeaderCreator"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CFileCreator"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestFileCreator"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftFileCreator"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftTestFileCreator"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/AnyGenerator"},{"text":".","type":"text"}]},{"type":"codeListing","code":["import Foundation","","public struct GUUnitsGenerator {","","    let fileManager = FileManager()","","    public func generateCFiles(in path: URL) throws {","        var hFile = path","        var cFile = path","        hFile.appendPathComponent(\"include\", isDirectory: true)","        if !fileManager.fileExists(atPath: hFile.path) {","            try fileManager.createDirectory(atPath: hFile.path, withIntermediateDirectories: true)","        }","        hFile.appendPathComponent(\"guunits.h\", isDirectory: false)","        cFile.appendPathComponent(\"guunits.c\", isDirectory: false)","        ","        \/\/ New Code:","        ","        let angleGenerator = AnyGenerator(generating: AngleUnits.self, using: AngleUnitsGenerator())","        let fileContents = HeaderCreator().generate(","            generators: [","                angleGenerator,","                \/\/ other generators...","            ]","        )","        .data(using: .utf8)","        fileManager.createFile(atPath: hFile.path, contents: fileContents)","        let cContents = CFileCreator().generate(","            generators: [","                angleGenerator,","                \/\/ other generators...","            ]","        )","        .data(using: .utf8)","        fileManager.createFile(atPath: cFile.path, contents: cContents)","    }","","    public func generateCTests(in path: URL) {","        let angleGenerator = AngleTestGenerator()","        let angleFileCreator = TestFileCreator<AngleTestGenerator>()","        createTestFiles(","            at: path, with: angleFileCreator.tests(generator: angleGenerator, imports: \"import CGUUnits\")","        )","        \/\/ other test generators...","    }","","    public func generateSwiftFiles(in path: URL) {","        let swiftFileCreator = SwiftFileCreator()","        writeFile(","            at: path, with: AngleUnits.category, and: swiftFileCreator.generate(for: AngleUnits.self)","        )","        \/\/ other units...","    }","","    public func generateSwiftTests(in path: URL) {","        let swiftFileCreator = SwiftTestFileCreator()","        createTestFiles(at: path, with: swiftFileCreator.generate(with: AngleTestGenerator()))","        \/\/ other units...","    }","","    \/\/ End new code.","","    private func createTestFiles(at path: URL, with tests: [(String, String)]) {","        tests.forEach {","            writeFile(at: path, with: $0, and: $1)","        }","    }","","    private func writeFile(at path: URL, with name: String, and contents: String) {","        fileManager.createFile(","            atPath: path.appendingPathComponent(\"\\(name).swift\", isDirectory: false).path,","            contents: contents.data(using: .utf8)","        )","    }","","}",""],"syntax":"swift"}]}],"references":{"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Signs":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Signs","navigatorTitle":[{"kind":"identifier","text":"Signs"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Signs"}],"title":"Signs","abstract":[{"text":"Enum containing the standard guunits signs.","type":"text"}],"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/signs"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GUUnitsGenerator":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GUUnitsGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"GUUnitsGenerator","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GUUnitsGenerator","title":"GUUnitsGenerator","abstract":[{"text":"Create the source files the C and swift targets of guunits.","type":"text"}],"url":"\/documentation\/guunitsgeneratorconversions\/guunitsgenerator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/AnyGenerator":{"url":"\/documentation\/guunitsgeneratorconversions\/anygenerator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyGenerator","kind":"identifier"}],"kind":"symbol","title":"AnyGenerator","abstract":[{"text":"A type-erased UnitGenerator.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/AnyGenerator","navigatorTitle":[{"text":"AnyGenerator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GettingStarted":{"type":"topic","role":"article","title":"Getting Started","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","url":"\/documentation\/guunitsgeneratorconversions\/gettingstarted","abstract":[{"type":"codeVoice","code":"GUUnitsGeneratorConversions"},{"text":" is the main target of ","type":"text"},{"type":"codeVoice","code":"guunits_generator"},{"text":". This target provides the unit and category","type":"text"},{"text":" ","type":"text"},{"text":"definitions for all the code generated in ","type":"text"},{"type":"codeVoice","code":"GUUnits"},{"text":".","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestGenerator":{"kind":"symbol","title":"TestGenerator","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"TestGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/testgenerator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestGenerator","abstract":[{"type":"text","text":"Conforming types will generate test parameters for a specific unit."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/ConvertingBetweenCategories":{"type":"topic","role":"article","title":"Coverting Between Categories","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories","url":"\/documentation\/guunitsgeneratorconversions\/convertingbetweencategories","abstract":[{"text":"This guide provides instructions for creating relations between different unit categories. A user may use a relation to convert a unit","type":"text"},{"text":" ","type":"text"},{"text":"into another unit from a different category.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestParameters":{"kind":"symbol","title":"TestParameters","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestParameters","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestParameters"}],"url":"\/documentation\/guunitsgeneratorconversions\/testparameters","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","abstract":[{"text":"Class for storing expected test result from an input.","type":"text"}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestFileCreator":{"kind":"symbol","title":"TestFileCreator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestFileCreator","kind":"identifier"}],"navigatorTitle":[{"text":"TestFileCreator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/testfilecreator","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestFileCreator","abstract":[{"type":"text","text":"Creates the contents for a test file. This struct generates all of the test code required"},{"type":"text","text":" "},{"type":"text","text":"to fully test a Unit category."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/SwiftFileCreator":{"navigatorTitle":[{"kind":"identifier","text":"SwiftFileCreator"}],"url":"\/documentation\/guunitsgeneratorconversions\/swiftfilecreator","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwiftFileCreator"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftFileCreator","title":"SwiftFileCreator","type":"topic","role":"symbol","abstract":[{"text":"Struct for generating swift files for a unit type.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingCompositeUnits":{"title":"Creating Composite Units","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","abstract":[{"text":"This guide demonstrates the process for creating ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"composite units"}]},{"text":". A composite unit is a unit category","type":"text"},{"text":" ","type":"text"},{"text":"that is created from other units.","type":"text"}],"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/creatingcompositeunits","role":"article","kind":"article"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingNewUnits":{"type":"topic","role":"article","title":"Creating New Units","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","url":"\/documentation\/guunitsgeneratorconversions\/creatingnewunits","abstract":[{"text":"Provides a guide and example for creating new units.","type":"text"}]},"gettingstarted":{"type":"link","identifier":"gettingstarted","title":"Getting Started","titleInlineContent":[{"text":"Getting Started","type":"text"}],"url":"gettingstarted"},"creatingnewunits":{"type":"link","identifier":"creatingnewunits","title":"Creating New Units","titleInlineContent":[{"text":"Creating New Units","type":"text"}],"url":"creatingnewunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/SwiftTestFileCreator":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwiftTestFileCreator","kind":"identifier"}],"navigatorTitle":[{"text":"SwiftTestFileCreator","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SwiftTestFileCreator","title":"SwiftTestFileCreator","abstract":[{"text":"Swift file creator for generating XCTest based files.","type":"text"}],"url":"\/documentation\/guunitsgeneratorconversions\/swifttestfilecreator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/FunctionBodyCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/functionbodycreator","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FunctionBodyCreator","kind":"identifier"}],"kind":"symbol","title":"FunctionBodyCreator","abstract":[{"text":"Protocol that generates the code for the implementation of a conversion function.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/FunctionBodyCreator","navigatorTitle":[{"text":"FunctionBodyCreator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitsGenerator":{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitsGenerator","type":"topic","navigatorTitle":[{"text":"UnitsGenerator","kind":"identifier"}],"abstract":[{"text":"Struct that generates the code for all the possible conversion functions.","type":"text"}],"role":"symbol","title":"UnitsGenerator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitsGenerator","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/unitsgenerator"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions":{"kind":"symbol","title":"GUUnitsGeneratorConversions","type":"topic","url":"\/documentation\/guunitsgeneratorconversions","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions","abstract":[{"type":"text","text":"A target for generating the GUUnits package."}],"role":"collection"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/SignConverter":{"url":"\/documentation\/guunitsgeneratorconversions\/signconverter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignConverter"}],"navigatorTitle":[{"kind":"identifier","text":"SignConverter"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/SignConverter","kind":"symbol","role":"symbol","title":"SignConverter","abstract":[{"type":"text","text":"A struct that creates c-code for converting a unit between it’s signed and unsigned variants."},{"type":"text","text":" "},{"type":"text","text":"A unit may need to be represented as a different type in the c-implementation. The functions in"},{"type":"text","text":" "},{"type":"text","text":"this struct perform a cast into the desired unit without performing any unit conversions."}],"type":"topic"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/HeaderCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/headercreator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HeaderCreator","kind":"identifier"}],"kind":"symbol","title":"HeaderCreator","abstract":[{"text":"Struct for creating the C header file.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/HeaderCreator","navigatorTitle":[{"text":"HeaderCreator","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CFileCreator":{"url":"\/documentation\/guunitsgeneratorconversions\/cfilecreator","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CFileCreator","kind":"identifier"}],"kind":"symbol","title":"CFileCreator","abstract":[{"text":"Generates all of the C types and conversion functions.","type":"text"}],"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CFileCreator","navigatorTitle":[{"text":"CFileCreator","kind":"identifier"}]}}}