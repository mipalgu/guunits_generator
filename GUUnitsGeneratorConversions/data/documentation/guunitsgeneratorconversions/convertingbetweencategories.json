{"variants":[{"paths":["\/documentation\/guunitsgeneratorconversions\/convertingbetweencategories"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ConvertingBetweenCategories","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This guide provides instructions for creating relations between different unit categories. A user may use a relation to convert a unit"},{"type":"text","text":" "},{"type":"text","text":"into another unit from a different category."}],"seeAlsoSections":[{"identifiers":["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits"],"title":"Essentials","generated":true}],"hierarchy":{"paths":[["doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions"]]},"kind":"article","metadata":{"title":"Coverting Between Categories","role":"article","modules":[{"name":"GUUnitsGeneratorConversions"}],"roleHeading":"Article"},"primaryContentSections":[{"content":[{"anchor":"Prerequisites","text":"Prerequisites","type":"heading","level":2},{"inlineContent":[{"text":"Please read the guides on ","type":"text"},{"identifier":"gettingstarted","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"creatingnewunits","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"usingcustomcodegeneration","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"creatingcompositeunits","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Defining-Relationships","text":"Defining Relationships","type":"heading","level":2},{"inlineContent":[{"text":"To convert between different categories, a unit may use a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Relation"},{"text":". A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Relation"},{"text":" is simply an","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation"},{"text":" that converts a unit of one category into a unit of a different category. A unit may define","type":"text"},{"text":" ","type":"text"},{"text":"a relation by specifying a static property called ","type":"text"},{"code":"relationships","type":"codeVoice"},{"text":" in itâ€™s category definition.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, consider the ","type":"text"},{"code":"Acceleration","type":"codeVoice"},{"text":" unit below:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ A unit that represents Acceleration in SI units.","public struct Acceleration: CompositeUnit {","","    \/\/\/ The base unit is SI metres per second squared (m\/s^2).","    public static let baseUnit: Operation = .division(","        lhs: .constant(declaration: AnyUnit(DistanceUnits.metres)),","        rhs: .exponentiate(","            base: .constant(declaration: AnyUnit(TimeUnits.seconds)),","            power: .literal(declaration: .integer(value: 2))","        )","    )","","    \/\/\/ The unit instance of this category.","    public var unit: Operation","","    \/\/\/ Initialise the acceleration from an acceleration unit.","    \/\/\/ - Parameter unit: The acceleration unit represented as distance divided by time squared.","    public init(unit: Operation) {","        self.unit = unit","    }","","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This unit is a "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","isActive":true},{"type":"text","text":" that represents "},{"type":"codeVoice","code":"acceleration"},{"type":"text","text":" using SI units. Now suppose we wish"},{"type":"text","text":" "},{"type":"text","text":"to relate "},{"type":"codeVoice","code":"acceleration"},{"type":"text","text":" in SI units with another form of "},{"type":"codeVoice","code":"acceleration"},{"type":"text","text":", say acceleration proportional"},{"type":"text","text":" "},{"type":"text","text":"to Earths gravitational constant "},{"type":"codeVoice","code":"g"},{"type":"text","text":". This relation should allow us to represent acceleration as "},{"type":"codeVoice","code":"1g"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"2g","type":"codeVoice"},{"text":", etc. To achieve this, we must create a new simple unit called ","type":"text"},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ReferenceAcceleration","isActive":true,"type":"reference"},{"text":" that contains","type":"text"},{"text":" ","type":"text"},{"text":"the Earth ","type":"text"},{"code":"g","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ Provides non-SI acceleration units.","public enum ReferenceAcceleration: String {","","    \/\/\/ The acceleration from earth gravity.","    case earthG","","}","","\/\/\/ ``UnitProtocol`` conformance.","extension ReferenceAcceleration: UnitProtocol {","","    \/\/\/ The abbreviation of the unit.","    public var abbreviation: String {","        switch self {","        case .earthG:","            return \"gs\"","        }","    }","","    \/\/\/ The description of the unit.","    public var description: String {","        self.rawValue","    }","","}","","\/\/\/ ``UnitsConvertible`` conformance.","extension ReferenceAcceleration: UnitsConvertible {","","    \/\/\/ Convert this unit to another unit within the same category.","    \/\/\/ - Parameter unit: The unit to convert to.","    \/\/\/ - Returns: The operation converting `self` to `unit`.","    public func conversion(to unit: ReferenceAcceleration) -> Operation {","        .constant(declaration: AnyUnit(self))","    }","","}"],"syntax":"swift"},{"inlineContent":[{"text":"We can now ","type":"text"},{"inlineContent":[{"type":"text","text":"relate"}],"type":"emphasis"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Acceleration","type":"reference"},{"text":" to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ReferenceAcceleration","type":"reference"},{"text":" using a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Relation","type":"reference"},{"text":". We can define","type":"text"},{"text":" ","type":"text"},{"text":"these relations inside the ","type":"text"},{"code":"relationships","type":"codeVoice"},{"text":" static property in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Acceleration","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ ``UnitRelatable`` conformance.","extension Acceleration {","","    \/\/\/ Add metresPerSecond static property for convenience.","    static var metresPerSecond2: AnyUnit {","        AnyUnit(","            Acceleration(","                unit: .division(","                    lhs: .constant(declaration: AnyUnit(DistanceUnits.metres)),","                    rhs: .exponentiate(","                        base: .constant(declaration: AnyUnit(TimeUnits.seconds)),","                        power: .literal(declaration: .integer(value: 2))","                    )","                )","            )","        )","    }","","    \/\/\/ The related types that this category can convert into.","    public static var relationships: [Relation] {","        let mps2 = Operation.division(","            lhs: .constant(declaration: AnyUnit(DistanceUnits.metres)),","            rhs: .exponentiate(","                base: .constant(declaration: AnyUnit(TimeUnits.seconds)),","                power: .literal(declaration: .integer(value: 2))","            )","        )","        let operation = Operation.division(","            lhs: .constant(declaration: Acceleration.metresPerSecond2),","            rhs: .literal(declaration: .decimal(value: Double.earthAcceleration))","        )","        let target = AnyUnit(ReferenceAcceleration.earthG)","        return Self.allCases.map {","            let unit = AnyUnit($0)","            guard unit != Acceleration.metresPerSecond2 else {","                return Relation(","                    source: unit, target: target, operation: operation","                )","            }","            let newOperation = operation.replace(","                convertibles: [Acceleration.metresPerSecond2: $0.conversion(to: Acceleration(unit: mps2))]","            )","            return Relation(source: unit, target: target, operation: newOperation)","        }","    }","","}","","\/\/\/ Add g-constant for earth acceleration.","extension Double {","","    \/\/\/ The acceleration of earths gravity in metres per second squared.","    static let earthAcceleration: Double = 9.80665","","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This code first converts the "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Acceleration","isActive":true},{"type":"text","text":" into "},{"type":"emphasis","inlineContent":[{"text":"metres per second squared","type":"text"}]},{"type":"text","text":", and then divides this value"},{"type":"text","text":" "},{"type":"text","text":"by Earths gravitation acceleration constant 9.80665 m\/s^2. You will also notice that we need to specify the"},{"type":"text","text":" "},{"type":"text","text":"source unit and the target unit along with this "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","isActive":true},{"type":"text","text":" when defining each "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Relation","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Specifying-the-Tests-for-the-Relationships","text":"Specifying the Tests for the Relationships","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The tests for the relationships are automatically generated and specified for each relation through default"},{"type":"text","text":" "},{"type":"text","text":"implementations in protocol extensions. If you would like to however provide your own implementation, you"},{"type":"text","text":" "},{"type":"text","text":"may specify a property called "},{"type":"codeVoice","code":"relationTests"},{"type":"text","text":" that is a "},{"type":"codeVoice","code":"[UnitConversion: [TestParameters]]"},{"type":"text","text":" type. Please"},{"type":"text","text":" "},{"type":"text","text":"view the "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitConversion","type":"reference","isActive":true},{"type":"text","text":", and "},{"identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","type":"reference","isActive":true},{"type":"text","text":" types for the details of"},{"type":"text","text":" "},{"type":"text","text":"implementing this."}],"type":"paragraph"},{"anchor":"Generating-The-Source-Code","text":"Generating The Source Code","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"There are no additional steps needed to generate the relations in the source code. The file creators for the"},{"type":"text","text":" "},{"type":"text","text":"C and swift files automatically check the "},{"type":"codeVoice","code":"relationships"},{"type":"text","text":" property and generate the code appropriately."}],"type":"paragraph"},{"anchor":"Generated-Code","text":"Generated Code","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"For brevity, we will only show the code for the "},{"type":"codeVoice","code":"metres_per_seconds_sq"},{"type":"text","text":" types."}],"type":"paragraph"},{"anchor":"C-Layer","text":"C Layer","type":"heading","level":3},{"anchor":"Header","text":"Header","type":"heading","level":4},{"type":"codeListing","code":["\/**","* Convert metres_per_seconds_sq_t to earthG_t.","*\/","earthG_t m_per_s_sq_t_to_gs_t(metres_per_seconds_sq_t metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_t to earthG_u.","*\/","earthG_u m_per_s_sq_t_to_gs_u(metres_per_seconds_sq_t metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_t to earthG_f.","*\/","earthG_f m_per_s_sq_t_to_gs_f(metres_per_seconds_sq_t metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_t to earthG_d.","*\/","earthG_d m_per_s_sq_t_to_gs_d(metres_per_seconds_sq_t metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_u to earthG_t.","*\/","earthG_t m_per_s_sq_u_to_gs_t(metres_per_seconds_sq_u metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_u to earthG_u.","*\/","earthG_u m_per_s_sq_u_to_gs_u(metres_per_seconds_sq_u metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_u to earthG_f.","*\/","earthG_f m_per_s_sq_u_to_gs_f(metres_per_seconds_sq_u metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_u to earthG_d.","*\/","earthG_d m_per_s_sq_u_to_gs_d(metres_per_seconds_sq_u metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_f to earthG_t.","*\/","earthG_t m_per_s_sq_f_to_gs_t(metres_per_seconds_sq_f metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_f to earthG_u.","*\/","earthG_u m_per_s_sq_f_to_gs_u(metres_per_seconds_sq_f metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_f to earthG_f.","*\/","earthG_f m_per_s_sq_f_to_gs_f(metres_per_seconds_sq_f metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_f to earthG_d.","*\/","earthG_d m_per_s_sq_f_to_gs_d(metres_per_seconds_sq_f metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_d to earthG_t.","*\/","earthG_t m_per_s_sq_d_to_gs_t(metres_per_seconds_sq_d metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_d to earthG_u.","*\/","earthG_u m_per_s_sq_d_to_gs_u(metres_per_seconds_sq_d metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_d to earthG_f.","*\/","earthG_f m_per_s_sq_d_to_gs_f(metres_per_seconds_sq_d metres_per_seconds_sq);","","\/**","* Convert metres_per_seconds_sq_d to earthG_d.","*\/","earthG_d m_per_s_sq_d_to_gs_d(metres_per_seconds_sq_d metres_per_seconds_sq);"],"syntax":"h"},{"anchor":"Source-File","text":"Source File","type":"heading","level":4},{"type":"codeListing","code":["\/**","* Convert metres_per_seconds_sq_t to earthG_t.","*\/","earthG_t m_per_s_sq_t_to_gs_t(metres_per_seconds_sq_t metres_per_seconds_sq)","{","    const int64_t unit0 = ((int64_t) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_t(unit0), 0)) {","        return 9223372036854775807;","    } else if (__builtin_expect((overflow_lower_t(unit0)), 0)) {","        return -9223372036854775807 - 1;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 9223372036854775807;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -9223372036854775807 - 1;","        } else {","            return ((earthG_t) (d_to_i64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_t to earthG_u.","*\/","earthG_u m_per_s_sq_t_to_gs_u(metres_per_seconds_sq_t metres_per_seconds_sq)","{","    const int64_t unit0 = ((int64_t) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_t(unit0), 0)) {","        return 18446744073709551615U;","    } else if (__builtin_expect((overflow_lower_t(unit0)), 0)) {","        return 0;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 18446744073709551615U;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return 0;","        } else {","            return ((earthG_u) (d_to_u64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_t to earthG_f.","*\/","earthG_f m_per_s_sq_t_to_gs_f(metres_per_seconds_sq_t metres_per_seconds_sq)","{","    const int64_t unit0 = ((int64_t) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_t(unit0), 0)) {","        return FLT_MAX;","    } else if (__builtin_expect((overflow_lower_t(unit0)), 0)) {","        return -FLT_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return FLT_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -FLT_MAX;","        } else {","            return ((earthG_f) (d_to_f(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_t to earthG_d.","*\/","earthG_d m_per_s_sq_t_to_gs_d(metres_per_seconds_sq_t metres_per_seconds_sq)","{","    const int64_t unit0 = ((int64_t) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_t(unit0), 0)) {","        return DBL_MAX;","    } else if (__builtin_expect((overflow_lower_t(unit0)), 0)) {","        return -DBL_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return DBL_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -DBL_MAX;","        } else {","            return ((earthG_d) (result));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_u to earthG_t.","*\/","earthG_t m_per_s_sq_u_to_gs_t(metres_per_seconds_sq_u metres_per_seconds_sq)","{","    const uint64_t unit0 = ((uint64_t) (metres_per_seconds_sq));","    if (__builtin_expect((overflow_upper_u(unit0)), 0)) {","        return 9223372036854775807;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 9223372036854775807;","        } else {","            return ((earthG_t) (d_to_i64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_u to earthG_u.","*\/","earthG_u m_per_s_sq_u_to_gs_u(metres_per_seconds_sq_u metres_per_seconds_sq)","{","    const uint64_t unit0 = ((uint64_t) (metres_per_seconds_sq));","    if (__builtin_expect((overflow_upper_u(unit0)), 0)) {","        return 18446744073709551615U;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 18446744073709551615U;","        } else {","            return ((earthG_u) (d_to_u64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_u to earthG_f.","*\/","earthG_f m_per_s_sq_u_to_gs_f(metres_per_seconds_sq_u metres_per_seconds_sq)","{","    const uint64_t unit0 = ((uint64_t) (metres_per_seconds_sq));","    if (__builtin_expect((overflow_upper_u(unit0)), 0)) {","        return FLT_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return FLT_MAX;","        } else {","            return ((earthG_f) (d_to_f(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_u to earthG_d.","*\/","earthG_d m_per_s_sq_u_to_gs_d(metres_per_seconds_sq_u metres_per_seconds_sq)","{","    const uint64_t unit0 = ((uint64_t) (metres_per_seconds_sq));","    if (__builtin_expect((overflow_upper_u(unit0)), 0)) {","        return DBL_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return DBL_MAX;","        } else {","            return ((earthG_d) (result));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_f to earthG_t.","*\/","earthG_t m_per_s_sq_f_to_gs_t(metres_per_seconds_sq_f metres_per_seconds_sq)","{","    const float unit0 = ((float) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_f(unit0), 0)) {","        return 9223372036854775807;","    } else if (__builtin_expect((overflow_lower_f(unit0)), 0)) {","        return -9223372036854775807 - 1;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 9223372036854775807;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -9223372036854775807 - 1;","        } else {","            return ((earthG_t) (d_to_i64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_f to earthG_u.","*\/","earthG_u m_per_s_sq_f_to_gs_u(metres_per_seconds_sq_f metres_per_seconds_sq)","{","    const float unit0 = ((float) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_f(unit0), 0)) {","        return 18446744073709551615U;","    } else if (__builtin_expect((overflow_lower_f(unit0)), 0)) {","        return 0;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 18446744073709551615U;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return 0;","        } else {","            return ((earthG_u) (d_to_u64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_f to earthG_f.","*\/","earthG_f m_per_s_sq_f_to_gs_f(metres_per_seconds_sq_f metres_per_seconds_sq)","{","    const float unit0 = ((float) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_f(unit0), 0)) {","        return FLT_MAX;","    } else if (__builtin_expect((overflow_lower_f(unit0)), 0)) {","        return -FLT_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return FLT_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -FLT_MAX;","        } else {","            return ((earthG_f) (d_to_f(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_f to earthG_d.","*\/","earthG_d m_per_s_sq_f_to_gs_d(metres_per_seconds_sq_f metres_per_seconds_sq)","{","    const float unit0 = ((float) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_f(unit0), 0)) {","        return DBL_MAX;","    } else if (__builtin_expect((overflow_lower_f(unit0)), 0)) {","        return -DBL_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return DBL_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -DBL_MAX;","        } else {","            return ((earthG_d) (result));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_d to earthG_t.","*\/","earthG_t m_per_s_sq_d_to_gs_t(metres_per_seconds_sq_d metres_per_seconds_sq)","{","    const double unit0 = ((double) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_d(unit0), 0)) {","        return 9223372036854775807;","    } else if (__builtin_expect((overflow_lower_d(unit0)), 0)) {","        return -9223372036854775807 - 1;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 9223372036854775807;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -9223372036854775807 - 1;","        } else {","            return ((earthG_t) (d_to_i64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_d to earthG_u.","*\/","earthG_u m_per_s_sq_d_to_gs_u(metres_per_seconds_sq_d metres_per_seconds_sq)","{","    const double unit0 = ((double) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_d(unit0), 0)) {","        return 18446744073709551615U;","    } else if (__builtin_expect((overflow_lower_d(unit0)), 0)) {","        return 0;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return 18446744073709551615U;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return 0;","        } else {","            return ((earthG_u) (d_to_u64(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_d to earthG_f.","*\/","earthG_f m_per_s_sq_d_to_gs_f(metres_per_seconds_sq_d metres_per_seconds_sq)","{","    const double unit0 = ((double) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_d(unit0), 0)) {","        return FLT_MAX;","    } else if (__builtin_expect((overflow_lower_d(unit0)), 0)) {","        return -FLT_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return FLT_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -FLT_MAX;","        } else {","            return ((earthG_f) (d_to_f(result)));","        }","    }","}","","\/**","* Convert metres_per_seconds_sq_d to earthG_d.","*\/","earthG_d m_per_s_sq_d_to_gs_d(metres_per_seconds_sq_d metres_per_seconds_sq)","{","    const double unit0 = ((double) (metres_per_seconds_sq));","    if (__builtin_expect(overflow_upper_d(unit0), 0)) {","        return DBL_MAX;","    } else if (__builtin_expect((overflow_lower_d(unit0)), 0)) {","        return -DBL_MAX;","    } else {","        const double result = divide_d((((double) (metres_per_seconds_sq))), (((double) (9.80665))));","        if (__builtin_expect(overflow_upper_d(result), 0)) {","            return DBL_MAX;","        } else if (__builtin_expect(overflow_lower_d(result), 0)) {","            return -DBL_MAX;","        } else {","            return ((earthG_d) (result));","        }","    }","}"],"syntax":"c"},{"anchor":"Swift-Layer","text":"Swift Layer","type":"heading","level":3},{"type":"codeListing","code":["public extension Earthg_t {","","    \/\/\/ Create a `Earthg_t` from a `Metres_Per_Seconds_Sq_t`.","    init(_ value: Metres_Per_Seconds_Sq_t) {","        self.init(rawValue: m_per_s_sq_t_to_gs_t(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_t` from a `Metres_Per_Seconds_Sq_u`.","    init(_ value: Metres_Per_Seconds_Sq_u) {","        self.init(rawValue: m_per_s_sq_u_to_gs_t(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_t` from a `Metres_Per_Seconds_Sq_f`.","    init(_ value: Metres_Per_Seconds_Sq_f) {","        self.init(rawValue: m_per_s_sq_f_to_gs_t(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_t` from a `Metres_Per_Seconds_Sq_d`.","    init(_ value: Metres_Per_Seconds_Sq_d) {","        self.init(rawValue: m_per_s_sq_d_to_gs_t(value.rawValue))","    }","","}","","public extension Earthg_u {","","    \/\/\/ Create a `Earthg_u` from a `Metres_Per_Seconds_Sq_t`.","    init(_ value: Metres_Per_Seconds_Sq_t) {","        self.init(rawValue: m_per_s_sq_t_to_gs_u(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_u` from a `Metres_Per_Seconds_Sq_u`.","    init(_ value: Metres_Per_Seconds_Sq_u) {","        self.init(rawValue: m_per_s_sq_u_to_gs_u(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_u` from a `Metres_Per_Seconds_Sq_f`.","    init(_ value: Metres_Per_Seconds_Sq_f) {","        self.init(rawValue: m_per_s_sq_f_to_gs_u(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_u` from a `Metres_Per_Seconds_Sq_d`.","    init(_ value: Metres_Per_Seconds_Sq_d) {","        self.init(rawValue: m_per_s_sq_d_to_gs_u(value.rawValue))","    }","","}","","public extension Earthg_f {","","    \/\/\/ Create a `Earthg_f` from a `Metres_Per_Seconds_Sq_t`.","    init(_ value: Metres_Per_Seconds_Sq_t) {","        self.init(rawValue: m_per_s_sq_t_to_gs_f(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_f` from a `Metres_Per_Seconds_Sq_u`.","    init(_ value: Metres_Per_Seconds_Sq_u) {","        self.init(rawValue: m_per_s_sq_u_to_gs_f(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_f` from a `Metres_Per_Seconds_Sq_f`.","    init(_ value: Metres_Per_Seconds_Sq_f) {","        self.init(rawValue: m_per_s_sq_f_to_gs_f(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_f` from a `Metres_Per_Seconds_Sq_d`.","    init(_ value: Metres_Per_Seconds_Sq_d) {","        self.init(rawValue: m_per_s_sq_d_to_gs_f(value.rawValue))","    }","","}","","public extension Earthg_d {","","    \/\/\/ Create a `Earthg_d` from a `Metres_Per_Seconds_Sq_t`.","    init(_ value: Metres_Per_Seconds_Sq_t) {","        self.init(rawValue: m_per_s_sq_t_to_gs_d(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_d` from a `Metres_Per_Seconds_Sq_u`.","    init(_ value: Metres_Per_Seconds_Sq_u) {","        self.init(rawValue: m_per_s_sq_u_to_gs_d(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_d` from a `Metres_Per_Seconds_Sq_f`.","    init(_ value: Metres_Per_Seconds_Sq_f) {","        self.init(rawValue: m_per_s_sq_f_to_gs_d(value.rawValue))","    }","","    \/\/\/ Create a `Earthg_d` from a `Metres_Per_Seconds_Sq_d`.","    init(_ value: Metres_Per_Seconds_Sq_d) {","        self.init(rawValue: m_per_s_sq_d_to_gs_d(value.rawValue))","    }","","}"],"syntax":"swift"}],"kind":"content"}],"references":{"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/TestParameters":{"kind":"symbol","title":"TestParameters","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestParameters","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestParameters"}],"url":"\/documentation\/guunitsgeneratorconversions\/testparameters","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","abstract":[{"text":"Class for storing expected test result from an input.","type":"text"}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CompositeUnit":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompositeUnit"}],"url":"\/documentation\/guunitsgeneratorconversions\/compositeunit","type":"topic","title":"CompositeUnit","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CompositeUnit","abstract":[{"text":"Defines a category that is created from relationships of other units. This protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defines a class of unit that uses different "},{"type":"codeVoice","code":"UnitProtocol"},{"type":"text","text":" types"},{"type":"text","text":" "},{"type":"text","text":"in itâ€™s definition."}],"navigatorTitle":[{"kind":"identifier","text":"CompositeUnit"}]},"usingcustomcodegeneration":{"type":"link","titleInlineContent":[{"type":"text","text":"Using Custom Code Generation"}],"identifier":"usingcustomcodegeneration","title":"Using Custom Code Generation","url":"usingcustomcodegeneration"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingCompositeUnits":{"title":"Creating Composite Units","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingCompositeUnits","abstract":[{"text":"This guide demonstrates the process for creating ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"composite units"}]},{"text":". A composite unit is a unit category","type":"text"},{"text":" ","type":"text"},{"text":"that is created from other units.","type":"text"}],"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/creatingcompositeunits","role":"article","kind":"article"},"gettingstarted":{"type":"link","titleInlineContent":[{"type":"text","text":"Getting Started"}],"identifier":"gettingstarted","title":"Getting Started","url":"gettingstarted"},"creatingnewunits":{"type":"link","titleInlineContent":[{"type":"text","text":"Creating New Units"}],"identifier":"creatingnewunits","title":"Creating New Units","url":"creatingnewunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/ReferenceAcceleration":{"url":"\/documentation\/guunitsgeneratorconversions\/referenceacceleration","kind":"symbol","abstract":[{"type":"text","text":"Provides non-SI acceleration units."}],"title":"ReferenceAcceleration","role":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/ReferenceAcceleration","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReferenceAcceleration","kind":"identifier"}],"navigatorTitle":[{"text":"ReferenceAcceleration","kind":"identifier"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UnitConversion":{"kind":"symbol","title":"UnitConversion","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnitConversion","kind":"identifier"}],"navigatorTitle":[{"text":"UnitConversion","kind":"identifier"}],"url":"\/documentation\/guunitsgeneratorconversions\/unitconversion","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UnitConversion","abstract":[{"text":"A struct for storing conversion information for conversions between different unit","type":"text"},{"text":" ","type":"text"},{"text":"categories.","type":"text"}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions":{"kind":"symbol","title":"GUUnitsGeneratorConversions","type":"topic","url":"\/documentation\/guunitsgeneratorconversions","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions","abstract":[{"type":"text","text":"A target for generating the GUUnits package."}],"role":"collection"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/GettingStarted":{"type":"topic","role":"article","title":"Getting Started","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/GettingStarted","url":"\/documentation\/guunitsgeneratorconversions\/gettingstarted","abstract":[{"type":"codeVoice","code":"GUUnitsGeneratorConversions"},{"text":" is the main target of ","type":"text"},{"type":"codeVoice","code":"guunits_generator"},{"text":". This target provides the unit and category","type":"text"},{"text":" ","type":"text"},{"text":"definitions for all the code generated in ","type":"text"},{"type":"codeVoice","code":"GUUnits"},{"text":".","type":"text"}]},"creatingcompositeunits":{"type":"link","titleInlineContent":[{"type":"text","text":"Composite Units"}],"identifier":"creatingcompositeunits","title":"Composite Units","url":"creatingcompositeunits"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Operation":{"navigatorTitle":[{"kind":"identifier","text":"Operation"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Operation"}],"url":"\/documentation\/guunitsgeneratorconversions\/operation","role":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","abstract":[{"type":"text","text":"Enum for defining common operations in a composite unit."}],"title":"Operation","kind":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/UsingCustomCodeGeneration":{"type":"topic","role":"article","title":"Using Custom Code Generation","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/UsingCustomCodeGeneration","url":"\/documentation\/guunitsgeneratorconversions\/usingcustomcodegeneration","abstract":[{"text":"This document provides a guide for creating custom source and test generation for a unit category that requires","type":"text"},{"text":" ","type":"text"},{"text":"custom conversion functions.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Relation":{"type":"topic","url":"\/documentation\/guunitsgeneratorconversions\/relation","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Relation","kind":"identifier"}],"navigatorTitle":[{"text":"Relation","kind":"identifier"}],"title":"Relation","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Relation","role":"symbol","abstract":[{"text":"A relation between 2 units within different categories. This struct defines an operation","type":"text"},{"text":" ","type":"text"},{"text":"to convert a source unit into a target unit through an ","type":"text"},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Operation","isActive":true},{"text":".","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/CreatingNewUnits":{"type":"topic","role":"article","title":"Creating New Units","kind":"article","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/CreatingNewUnits","url":"\/documentation\/guunitsgeneratorconversions\/creatingnewunits","abstract":[{"text":"Provides a guide and example for creating new units.","type":"text"}]},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/OperationalTestable":{"kind":"symbol","title":"OperationalTestable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"OperationalTestable"}],"navigatorTitle":[{"kind":"identifier","text":"OperationalTestable"}],"url":"\/documentation\/guunitsgeneratorconversions\/operationaltestable","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/OperationalTestable","abstract":[{"type":"text","text":"A type that specifies itâ€™s own "},{"type":"reference","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/TestParameters","isActive":true},{"type":"text","text":" for conversions within the"},{"type":"text","text":" "},{"type":"text","text":"category."}],"role":"symbol"},"doc://GUUnitsGeneratorConversions/documentation/GUUnitsGeneratorConversions/Acceleration":{"abstract":[{"type":"text","text":"A unit that represents Acceleration in SI units."}],"url":"\/documentation\/guunitsgeneratorconversions\/acceleration","role":"symbol","identifier":"doc:\/\/GUUnitsGeneratorConversions\/documentation\/GUUnitsGeneratorConversions\/Acceleration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Acceleration","kind":"identifier"}],"kind":"symbol","type":"topic","title":"Acceleration","navigatorTitle":[{"kind":"identifier","text":"Acceleration"}]}}}